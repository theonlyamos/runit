
# Generated by CodiumAI
import argparse
from httpx import patch
from runit.cli import run_project
from runit.constants import CONFIG_FILE
from runit.runit import RunIt
from runit.cli import start_websocket
from tkinter import PROJECTING


import pytest

class TestRunProject:

    # Loads configuration file and sets global variables
    def test_loads_configuration_file_and_sets_global_variables(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=False, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json']):
            run_project(args)
        assert CONFIG_FILE == 'runit.json'
        assert RunIt.DOCKER == False
        assert RunIt.KUBERNETES == False

    # Runs file if file argument is provided
    def test_runs_file_if_file_argument_is_provided(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=False, file='test.py', function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json', '--file', 'test.py']):
            with patch('runit.LanguageParser.run_file') as mock_run_file:
                run_project(args)
                mock_run_file.assert_called_once_with('test.py', 'python3.11')

    # Starts web server if shell and expose arguments are not provided
    def test_starts_web_server_if_shell_and_expose_arguments_are_not_provided(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=False, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json']):
            with patch('runit.start_webserver') as mock_start_webserver:
                run_project(args)
                mock_start_webserver.assert_called_once()

    # Serves function if shell argument is provided
    def test_serves_function_if_shell_argument_is_provided(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=False, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=True, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json', '--shell']):
            with patch('builtins.print') as mock_print:
                run_project(args)
                mock_print.assert_called_once()

    # Exposes local project on configured domain if expose argument is provided
    def test_exposes_local_project_on_configured_domain_if_expose_argument_is_provided(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=True, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json', '--expose']):
            with patch('runit.asyncio.run') as mock_asyncio_run:
                run_project(args)
                mock_asyncio_run.assert_called_once_with(start_websocket(project))

    # Raises FileNotFoundError if configuration file is not found and file argument is not provided
    def test_raises_file_not_found_error_if_configuration_file_is_not_found_and_file_argument_is_not_provided(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=False, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json']):
            with pytest.raises(FileNotFoundError):
                run_project(args)

    # Raises FileNotFoundError if configuration file is not found and configuration file is not created
    def test_raises_file_not_found_error_if_configuration_file_is_not_found_and_configuration_file_is_not_created(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=False, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json']):
            with patch('runit.RunIt.has_config_file', return_value=False):
                with pytest.raises(FileNotFoundError):
                    run_project(args)

    # Exits program if keyboard interrupt is raised while exposing local project
    def test_exits_program_if_keyboard_interrupt_is_raised_while_exposing_local_project(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=True, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json', '--expose']):
            with patch('runit.asyncio.run') as mock_asyncio_run:
                mock_asyncio_run.side_effect = KeyboardInterrupt
                with pytest.raises(SystemExit):
                    run_project(args)

    # Exits program if an exception is raised while exposing local project
    def test_exits_program_if_an_exception_is_raised_while_exposing_local_project(self):
        args = argparse.Namespace(config='runit.json', docker=False, expose=True, file=None, function='index', host='127.0.0.1', kubernetes=False, port=5000, shell=False, version=False, arguments=[])
        with patch('sys.argv', ['runit', '--config', 'runit.json', '--expose']):
            with patch('runit.asyncio.run') as mock_asyncio_run:
                mock_asyncio_run.side_effect = Exception
                with pytest.raises(SystemExit):
                    run_project(args)