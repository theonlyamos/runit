
# Generated by CodiumAI
import argparse
from runit.cli import create_config
from runit.constants import LANGUAGE_TO_RUNTIME
import getpass


import pytest

class TestCreateConfig:

    # create a config object with all required fields
    def test_create_config_with_required_fields(self):
        args = argparse.Namespace(name="project", language="python", runtime="python3.8", private=False)
        config = create_config(args)
        assert config['name'] == "project"
        assert config['language'] == "python"
        assert config['runtime'] == "python3.8"
        assert config['private'] == False
        assert 'author' in config
        assert 'name' in config['author']
        assert 'email' in config['author']

    # set the project name in the config object
    def test_set_project_name_in_config(self):
        args = argparse.Namespace(name="project", language="python", runtime="python3.8", private=False)
        config = create_config(args)
        assert config['name'] == "project"

    # set the language in the config object
    def test_set_language_in_config(self):
        args = argparse.Namespace(name="project", language="python", runtime="python3.8", private=False)
        config = create_config(args)
        assert config['language'] == "python"

    # set the runtime in the config object to default if an invalid runtime is provided
    def test_set_runtime_to_default_if_invalid(self):
        args = argparse.Namespace(name="project", language="python", runtime="invalid", private=False)
        config = create_config(args)
        assert config['runtime'] == LANGUAGE_TO_RUNTIME['python']

    # set the private flag in the config object to False if an invalid value is provided
    def test_set_private_flag_to_false_if_invalid(self):
        args = argparse.Namespace(name="project", language="python", runtime="python3.8", private="invalid")
        config = create_config(args)
        assert config['private'] == False

    # set the author name in the config object to a default value if the current user is not available
    def test_set_author_name_to_default_if_user_not_available(self):
        args = argparse.Namespace(name="project", language="python", runtime="python3.8", private=False)
        config = create_config(args)
        assert config['author']['name'] == getpass.getuser()